name: ESP32 Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [esp32dev, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfile') }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    
    - name: Build ESP32 project
      run: pio run --environment ${{ matrix.environment }}
    
    - name: Run static analysis
      if: matrix.environment == 'esp32dev'
      run: pio check --environment ${{ matrix.environment }} --fail-on-defect=medium
      continue-on-error: true
    
    - name: Generate build report
      if: matrix.environment == 'esp32dev'
      run: |
        echo "## Build Report 📊" >> $GITHUB_STEP_SUMMARY
        echo "### Environment: ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        pio run --environment ${{ matrix.environment }} --verbose | grep -E "(RAM|Flash|Memory)" || echo "Memory usage information not available"
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload build artifacts
      if: matrix.environment == 'esp32dev'
      uses: actions/upload-artifact@v4
      with:
        name: esp32-firmware
        path: |
          .pio/build/esp32dev/firmware.bin
          .pio/build/esp32dev/firmware.elf
        retention-days: 30

  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install markdownlint-cli
      run: npm install -g markdownlint-cli
    
    - name: Lint documentation
      run: |
        markdownlint *.md --ignore node_modules --config .markdownlint.json || true
        echo "## Documentation Check 📚" >> $GITHUB_STEP_SUMMARY
        echo "Markdown files linted successfully" >> $GITHUB_STEP_SUMMARY
    
    - name: Check documentation completeness
      run: |
        echo "## Documentation Files 📋" >> $GITHUB_STEP_SUMMARY
        echo "### Available Documentation:" >> $GITHUB_STEP_SUMMARY
        for file in *.md; do
          if [ -f "$file" ]; then
            echo "- ✅ $file ($(wc -l < "$file") lines)" >> $GITHUB_STEP_SUMMARY
          fi
        done

  size-analysis:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    
    - name: Build current version
      run: pio run --environment esp32dev
    
    - name: Get current build size
      run: |
        CURRENT_FLASH=$(pio run --environment esp32dev 2>&1 | grep -o "Flash: \[[^]]*\] [0-9.]*%" | grep -o "[0-9.]*%" | tail -1)
        CURRENT_RAM=$(pio run --environment esp32dev 2>&1 | grep -o "RAM: \[[^]]*\] [0-9.]*%" | grep -o "[0-9.]*%" | tail -1)
        echo "CURRENT_FLASH=${CURRENT_FLASH}" >> $GITHUB_ENV
        echo "CURRENT_RAM=${CURRENT_RAM}" >> $GITHUB_ENV
    
    - name: Checkout base branch
      run: |
        git fetch origin main
        git checkout origin/main
    
    - name: Build base version
      run: pio run --environment esp32dev
    
    - name: Get base build size
      run: |
        BASE_FLASH=$(pio run --environment esp32dev 2>&1 | grep -o "Flash: \[[^]]*\] [0-9.]*%" | grep -o "[0-9.]*%" | tail -1)
        BASE_RAM=$(pio run --environment esp32dev 2>&1 | grep -o "RAM: \[[^]]*\] [0-9.]*%" | grep -o "[0-9.]*%" | tail -1)
        echo "BASE_FLASH=${BASE_FLASH}" >> $GITHUB_ENV
        echo "BASE_RAM=${BASE_RAM}" >> $GITHUB_ENV
    
    - name: Comment size comparison
      uses: actions/github-script@v7
      with:
        script: |
          const currentFlash = process.env.CURRENT_FLASH || 'N/A';
          const currentRam = process.env.CURRENT_RAM || 'N/A';
          const baseFlash = process.env.BASE_FLASH || 'N/A';
          const baseRam = process.env.BASE_RAM || 'N/A';
          
          const body = `## 📊 Build Size Analysis
          
          | Metric | Base (main) | Current (PR) | Change |
          |--------|-------------|--------------|--------|
          | Flash Usage | ${baseFlash} | ${currentFlash} | ${currentFlash !== baseFlash ? '⚠️ Changed' : '✅ No change'} |
          | RAM Usage | ${baseRam} | ${currentRam} | ${currentRam !== baseRam ? '⚠️ Changed' : '✅ No change'} |
          
          ### Analysis
          - Flash usage shows the percentage of ESP32 flash memory used
          - RAM usage shows the percentage of runtime memory used
          - Changes in memory usage should be reviewed for optimization opportunities
          
          *This analysis helps maintain optimal memory usage across code changes.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    runs-on: ubuntu-latest
    needs: [build, documentation-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    
    - name: Build release firmware
      run: pio run --environment esp32dev
    
    - name: Get version from platformio.ini
      id: get_version
      run: |
        VERSION=$(grep "build_flags.*-DVERSION" platformio.ini | sed 's/.*VERSION="\([^"]*\)".*/\1/' || echo "1.0.0")
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}-${{ github.run_number }}
        release_name: ESP32 WiFi Utility v${{ steps.get_version.outputs.version }}
        body: |
          ## ESP32 WiFi Utility Release
          
          ### Features
          - ✅ Enhanced WiFi scanning with visual indicators
          - ✅ Complete iPerf network performance testing (TCP/UDP)
          - ✅ Access Point management with QR code generation
          - ✅ Interactive command interface with real-time feedback
          - ✅ Comprehensive documentation and testing suite
          
          ### Build Information
          - **Commit**: ${{ github.sha }}
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Build Number**: ${{ github.run_number }}
          
          ### Installation
          1. Download the firmware.bin file
          2. Flash to ESP32 using your preferred method
          3. Connect via serial at 115200 baud
          4. Type 'help' for available commands
          
          See [README.md](README.md) for complete usage instructions.
        draft: false
        prerelease: false
    
    - name: Upload firmware to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .pio/build/esp32dev/firmware.bin
        asset_name: esp32-wifi-utility-v${{ steps.get_version.outputs.version }}.bin
        asset_content_type: application/octet-stream