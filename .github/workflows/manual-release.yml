name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 2.0.1)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  manual-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    
    - name: Update version in platformio.ini
      run: |
        sed -i 's/-DVERSION="[^"]*"/-DVERSION="${{ inputs.version }}"/' platformio.ini
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add platformio.ini
        git commit -m "chore: bump version to ${{ inputs.version }}"
        git push
    
    - name: Build release firmware
      run: |
        echo "🔨 Building firmware for manual release v${{ inputs.version }}"
        
        # Build ESP32dev environment
        echo "Building ESP32dev environment..."
        pio run --environment esp32dev
        
        # Build Feather ESP32-S3 TFT environment  
        echo "Building Feather ESP32-S3 TFT environment..."
        pio run --environment adafruit_feather_esp32s3_tft
        
        # Verify firmware files exist
        echo "🔍 Verifying firmware files..."
        
        ESP32_BIN=".pio/build/esp32dev/firmware.bin"
        ESP32_ELF=".pio/build/esp32dev/firmware.elf"
        FEATHER_BIN=".pio/build/adafruit_feather_esp32s3_tft/firmware.bin"
        FEATHER_ELF=".pio/build/adafruit_feather_esp32s3_tft/firmware.elf"
        
        for file in "$ESP32_BIN" "$ESP32_ELF" "$FEATHER_BIN" "$FEATHER_ELF"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required firmware file missing: $file"
            exit 1
          fi
          echo "✅ $file: $(ls -lh "$file" | awk '{print $5}')"
        done
    
    - name: Generate release notes
      run: |
        BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        cat > release_notes.md << EOF
        ## ESP32 WiFi Utility v${{ inputs.version }}
        
        ### 🚀 Features
        - ✅ Enhanced WiFi scanning with visual indicators and signal quality analysis
        - ✅ Complete iPerf network performance testing (TCP/UDP client/server modes)
        - ✅ Access Point management with QR code generation for easy mobile connection
        - ✅ Interactive command interface with real-time feedback and status indicators
        - ✅ Comprehensive documentation and 17+ unit tests for quality assurance
        
        ### 📊 Technical Specifications
        - **Flash Usage**: 61.4% (805KB) - Optimized for ESP32 with room for expansion
        - **RAM Usage**: 13.9% (45KB) - Efficient memory utilization
        - **Build System**: PlatformIO with automated CI/CD pipeline
        - **Testing**: Comprehensive unit test suite with hardware-in-loop validation
        
        ### 🔧 Build Information
        - **Version**: ${{ inputs.version }}
        - **Commit**: ${{ github.sha }}
        - **Build Date**: ${BUILD_DATE}
        - **Workflow**: Manual Release
        
        ### 📦 Installation Instructions
        1. **Download**: Get the firmware binary file below
        2. **Flash**: Use esptool, Arduino IDE, or your preferred ESP32 flashing method
        3. **Connect**: Serial connection at 115200 baud rate
        4. **Start**: Type \`help\` for complete command reference
        
        ### 🎯 Quick Start Commands
        \`\`\`bash
        mode station          # Switch to WiFi scanning mode
        scan now             # Perform enhanced network scan with analysis
        scan info 1          # Get detailed info for specific network
        mode ap              # Start access point with QR code
        iperf status         # Check network performance testing status
        help                 # Show all available commands
        \`\`\`
        
        ### 📚 Complete Documentation
        - [README.md](README.md) - Main project documentation
        - [ENHANCED_SCANNING.md](ENHANCED_SCANNING.md) - Advanced scanning features
        - [IPERF_GUIDE.md](IPERF_GUIDE.md) - Network performance testing
        - [GITHUB_ACTIONS.md](GITHUB_ACTIONS.md) - CI/CD pipeline documentation
        
        **Manual release created for version ${{ inputs.version }}**
        EOF
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="v${{ inputs.version }}"
        RELEASE_NAME="ESP32 WiFi Utility v${{ inputs.version }}"
        PRERELEASE_FLAG=""
        
        if [ "${{ inputs.prerelease }}" = "true" ]; then
          PRERELEASE_FLAG="--prerelease"
        else
          PRERELEASE_FLAG="--latest"
        fi
        
        # Create release with firmware attachments for both boards
        gh release create "$TAG_NAME" \
          --title "$RELEASE_NAME" \
          --notes-file release_notes.md \
          $PRERELEASE_FLAG \
          .pio/build/esp32dev/firmware.bin#esp32-wifi-utility-esp32dev-v${{ inputs.version }}.bin \
          .pio/build/esp32dev/firmware.elf#esp32-wifi-utility-esp32dev-debug-v${{ inputs.version }}.elf \
          .pio/build/adafruit_feather_esp32s3_tft/firmware.bin#esp32-wifi-utility-feather-s3-tft-v${{ inputs.version }}.bin \
          .pio/build/adafruit_feather_esp32s3_tft/firmware.elf#esp32-wifi-utility-feather-s3-tft-debug-v${{ inputs.version }}.elf
        
        echo "✅ Manual release created successfully: $TAG_NAME"